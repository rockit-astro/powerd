#!/usr/bin/env python3.4
#
# This file is part of powerd.
#
# powerd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# powerd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with powerd.  If not, see <http://www.gnu.org/licenses/>.

# pylint: disable=broad-except
# pylint: disable=too-few-public-methods

"""Frontend for interacting with the PDUs and UPSes via SNMP."""

import datetime
import Pyro4

from warwick.observatory.common import (
    daemons,
    log,
    IP)
from warwick.observatory.common.helpers import pyro_client_matches
from warwick.w1m.power import (
    SwitchStatus,
    DehumidifierSwitchDevice,
    DehumidifierParameter,
    SNMPDevice,
    APCPDUSocketParameter,
    APCUPSStatusParameter,
    APCUPSBatteryRemainingParameter,
    APCUPSBatteryHealthyParameter,
    APCUPSOutputLoadParameter,
    NetgearPoESocketParameter)

SWITCHABLE_PARAMETERS = (DehumidifierParameter, APCPDUSocketParameter, NetgearPoESocketParameter)

# Machines that are allowed to issue power commands
CONTROL_IPS = [IP.OneMetreDome, IP.OneMetreTCS]

# Timeout in seconds for SNMP commands
SNMP_TIMEOUT = 2

RACK_PDU_IP = '10.2.6.212'
RACK_PDU_PORTS = [
    APCPDUSocketParameter('rack_nuc', 1),
    APCPDUSocketParameter('telescope_12v', 2),
    APCPDUSocketParameter('telescope_80v', 3),
    APCPDUSocketParameter('vaisala', 4),
    APCPDUSocketParameter('monitor', 6),
    APCPDUSocketParameter('light', 8)
]

TEL_PDU_IP = '10.2.6.213'
TEL_PDU_PORTS = [
    APCPDUSocketParameter('red_camera', 1),
    APCPDUSocketParameter('blue_camera', 2),
    APCPDUSocketParameter('telescope_nuc', 3),
    APCPDUSocketParameter('red_focus_motor', 7),
    APCPDUSocketParameter('red_focus_controller', 8)
]

MAIN_UPS_IP = '10.2.6.210'
MAIN_UPS_PARAMETERS = [
    APCUPSStatusParameter('main_ups_status'),
    APCUPSBatteryRemainingParameter('main_ups_battery_remaining'),
    APCUPSBatteryHealthyParameter('main_ups_battery_healthy'),
    APCUPSOutputLoadParameter('main_ups_load'),
]

DOME_UPS_IP = '10.2.6.211'
DOME_UPS_PARAMETERS = [
    APCUPSStatusParameter('dome_ups_status'),
    APCUPSBatteryRemainingParameter('dome_ups_battery_remaining'),
    APCUPSBatteryHealthyParameter('dome_ups_battery_healthy'),
    APCUPSOutputLoadParameter('dome_ups_load'),
]

RACK_SWITCH_IP = '10.2.6.214'
RACK_SWITCH_PARAMETERS = [
    NetgearPoESocketParameter('telescope_network', 1),
    NetgearPoESocketParameter('webcam', 3),
    NetgearPoESocketParameter('roomalert', 5),
    NetgearPoESocketParameter('microphone', 7),
]

DEHUMIDIFIER_SERIAL_PORT = '/dev/dehumidifier'

class PowerDaemon:
    """Wraps a web request to the PDUs and UPSes"""
    def __init__(self):
        self._devices = [
            SNMPDevice(RACK_PDU_IP, RACK_PDU_PORTS, SNMP_TIMEOUT),
            SNMPDevice(TEL_PDU_IP, TEL_PDU_PORTS, SNMP_TIMEOUT),
            SNMPDevice(MAIN_UPS_IP, MAIN_UPS_PARAMETERS, SNMP_TIMEOUT),
            SNMPDevice(DOME_UPS_IP, DOME_UPS_PARAMETERS, SNMP_TIMEOUT),
            SNMPDevice(RACK_SWITCH_IP, RACK_SWITCH_PARAMETERS, SNMP_TIMEOUT),
            DehumidifierSwitchDevice(DEHUMIDIFIER_SERIAL_PORT,
                                     DehumidifierParameter('dehumidifier'), self),
        ]

        # Map of parameter name to device holding the parameter
        self._device_by_parameter = {}
        self._parameters_by_name = {}
        for device in self._devices:
            for parameter in device.parameters:
                self._device_by_parameter.update({parameter.name: device})
                self._parameters_by_name.update({parameter.name: parameter})

    @Pyro4.expose
    def last_measurement(self):
        """Query the latest valid measurement"""
        data = {'date': datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ')}
        for device in self._devices:
            data.update(device.status())
        return data

    def switch_internal(self, name, enable):
        """Switch a named UPS switch parameter on or off
           Used internally (avoids the pyro client checks)
        """
        if name not in self._device_by_parameter:
            return False

        if not isinstance(self._parameters_by_name[name], SWITCHABLE_PARAMETERS):
            return False

        state = (SwitchStatus.On if enable else SwitchStatus.Off)
        ret = self._device_by_parameter[name].set_parameter(name, state)
        if ret:
            log.info('powerd', 'Switched ' + name + ' on' if enable else ' off')
        else:
            log.error('powerd', 'Failed to switch ' + name + ' on' if enable else ' off')
        return ret

    @Pyro4.expose
    def switch(self, name, enable):
        """Switch a named UPS switch parameter on or off"""
        if not pyro_client_matches(CONTROL_IPS):
            return False

        return self.switch_internal(name, enable)

    @Pyro4.expose
    def value(self, name):
        """Query the value of a named parameter"""
        if name not in self._device_by_parameter:
            return False

        return self._device_by_parameter[name].get_parameter(name)

if __name__ == '__main__':
    daemons.onemetre_power.launch(PowerDaemon())
