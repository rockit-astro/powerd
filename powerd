#!/usr/bin/env python3.4
#
# This file is part of powerd.
#
# powerd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# powerd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with powerd.  If not, see <http://www.gnu.org/licenses/>.

# pylint: disable=broad-except
# pylint: disable=too-few-public-methods
# pylint: disable=invalid-name

"""Frontend for interacting with the PDUs and UPSes via SNMP."""

import argparse
import datetime
import sys
import Pyro4
from warwick.observatory.common import log
from warwick.observatory.common.helpers import pyro_client_matches
from warwick.observatory.power import (
    OneMetreConfig,
    RASAConfig,
    SwitchStatus,
    DehumidifierParameter,
    APCPDUSocketParameter,
    APCUPSSocketGroupParameter,
    NetgearPoESocketParameter)

# Include more detailed exceptions
sys.excepthook = Pyro4.util.excepthook

SWITCHABLE_PARAMETERS = (
    DehumidifierParameter,
    APCPDUSocketParameter,
    APCUPSSocketGroupParameter,
    NetgearPoESocketParameter)

CONFIG = {
    'onemetre': OneMetreConfig,
    'rasa': RASAConfig
}

class PowerDaemon:
    """Wraps a web request to the PDUs and UPSes"""
    def __init__(self, config):
        self._devices = config.get_devices(self)
        self._control_ips = config.control_ips
        self._log_name = config.log_name

        # Map of parameter name to device holding the parameter
        self._device_by_parameter = {}
        self._parameters_by_name = {}
        for device in self._devices:
            for parameter in device.parameters:
                self._device_by_parameter.update({parameter.name: device})
                self._parameters_by_name.update({parameter.name: parameter})

    @Pyro4.expose
    def last_measurement(self):
        """Query the latest valid measurement"""
        data = {'date': datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ')}
        for device in self._devices:
            data.update(device.status())
        return data

    def switch_internal(self, name, enable):
        """Switch a named switch parameter on or off
           Used internally (avoids the pyro client checks)
        """
        if name not in self._device_by_parameter:
            return False

        if not isinstance(self._parameters_by_name[name], SWITCHABLE_PARAMETERS):
            return False

        state = (SwitchStatus.On if enable else SwitchStatus.Off)
        ret = self._device_by_parameter[name].set_parameter(name, state)
        if ret:
            log.info(self._log_name, 'Switched ' + name + (' on' if enable else ' off'))
        else:
            log.error(self._log_name, 'Failed to switch ' + name + (' on' if enable else ' off'))
        return ret

    @Pyro4.expose
    def switch(self, name, enable):
        """Switch a named switch parameter on or off"""
        if not pyro_client_matches(self._control_ips):
            return False

        return self.switch_internal(name, enable)

    @Pyro4.expose
    def value(self, name):
        """Query the value of a named parameter"""
        if name not in self._device_by_parameter:
            return False

        return self._device_by_parameter[name].get_parameter(name)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Power Server')
    parser.add_argument('telescope', choices=CONFIG.keys(), help='Select a telescope')
    args = parser.parse_args()
    telescope = CONFIG[args.telescope]
    telescope.daemon.launch(PowerDaemon(telescope))
