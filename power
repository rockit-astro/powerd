#!/usr/bin/env python3
#
# This file is part of powerd.
#
# powerd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# powerd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with powerd.  If not, see <http://www.gnu.org/licenses/>.

"""Commandline client for interfacing with the power system daemon"""

import datetime
import json
import os
import sys
import Pyro4
import warwick.observatory as observatory

SCRIPT_NAME = os.path.basename(sys.argv[0])
sys.excepthook = Pyro4.util.excepthook

FMT_YELLOW = u'\033[93m'
FMT_GREEN = u'\033[92m'
FMT_RED = u'\033[91m'
FMT_BOLD = u'\033[1m'
FMT_CLEAR = u'\033[0m'

UPS_STATUS = {
    1: FMT_BOLD + FMT_RED + 'UNKNOWN' + FMT_CLEAR,
    2: FMT_BOLD + FMT_GREEN + 'ONLINE' + FMT_CLEAR,
    3: FMT_BOLD + FMT_YELLOW + 'ON BATTERY' + FMT_CLEAR,
    4: FMT_BOLD + FMT_RED + 'SMART BOOST' + FMT_CLEAR,
    5: FMT_BOLD + FMT_RED + 'TIMED SLEEPING' + FMT_CLEAR,
    6: FMT_BOLD + FMT_RED + 'SOFTWARE BYPASS' + FMT_CLEAR,
    7: FMT_BOLD + FMT_RED + 'OFF' + FMT_CLEAR,
    8: FMT_BOLD + FMT_RED + 'REBOOTING' + FMT_CLEAR,
    9: FMT_BOLD + FMT_RED + 'SWITCHED BYPASS' + FMT_CLEAR,
    10: FMT_BOLD + FMT_RED + 'HARDWARE FAILURE BYPASS' + FMT_CLEAR,
    11: FMT_BOLD + FMT_RED + 'SLEEPING UNTIL POWER RETURNS' + FMT_CLEAR,
    12: FMT_BOLD + FMT_RED + 'ON SMART TRIM' + FMT_CLEAR,
}

def print_status():
    """Prints the latest data in human-readable form"""
    latest = None
    try:
        with observatory.daemons.onemetre_power.connect() as power:
            latest = power.last_measurement()
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with the power system daemon')
        return 1

    if latest is not None:
        date = datetime.datetime.strptime(latest['date'], '%Y-%m-%dT%H:%M:%SZ')
        print('Data received \033[1m{}\033[0m:'.format(date))
        print('   Tel. Computer: ' + format_power(latest['telescope_nuc']))
        print('    Tel. Network: ' + format_power(latest['telescope_network']))
        print('Tel. Controllers: ' + format_power(latest['telescope_12v']))
        print('     Tel. Motors: ' + format_power(latest['telescope_80v']))
        print('     Blue Camera: ' + format_power(latest['blue_camera']))
        print('      Red Camera: ' + format_power(latest['red_camera']))
        print('  Red Foc. Motor: ' + format_power(latest['red_focus_motor']))
        print(' Red Foc. Ctrler: ' + format_power(latest['red_focus_controller']))
        print('   Rack Computer: ' + format_power(latest['rack_nuc']))
        print(' Internal Webcam: ' + format_power(latest['webcam']))
        print('      Room Alert: ' + format_power(latest['roomalert']))
        print(' Weather Station: ' + format_power(latest['vaisala']))
        print('      Dome Light: ' + format_power(latest['light']))

        print('        Main UPS: ' + format_ups(latest['main_ups_status'],
                                                latest['main_ups_battery_remaining'],
                                                latest['main_ups_battery_healthy'],
                                                latest['main_ups_load']))
        print('        Dome UPS: ' + format_ups(latest['dome_ups_status'],
                                                latest['dome_ups_battery_remaining'],
                                                latest['dome_ups_battery_healthy'],
                                                latest['dome_ups_load']))
        print()
    else:
        print('error: failed to query data')

    return 0

def format_power(enabled):
    """Builds a formatted string indicating whether a switch is enabled"""
    if enabled:
        return FMT_GREEN + FMT_BOLD + 'ENABLED' + FMT_CLEAR
    return FMT_RED + FMT_BOLD + 'DISABLED' + FMT_CLEAR

def format_ups(status, battery_remaining, battery_healthy, load):
    """Builds a formatted string reporting UPS status"""
    ret = UPS_STATUS[status]
    ret += ' ({2}{0}%{3} battery; {2}{1}%{3} load)'.format(battery_remaining, load,
                                                           FMT_BOLD, FMT_CLEAR)
    if not battery_healthy:
        ret += FMT_BOLD + FMT_RED + ' REPLACE BATTERY' + FMT_CLEAR
    return ret

def print_json():
    """Prints the latest data in machine-readable form"""
    latest = None
    try:
        with observatory.daemons.onemetre_power.connect() as power:
            latest = power.last_measurement()
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with the power system daemon')
        return 1

    print(json.dumps(latest))

    return 0

def switch_power(args):
    """Switches a named PDU port on or off"""
    if len(args) > 1:
        enable = False
        if args[1] == 'on' or args[1] == 'off':
            enable = args[1] == 'on'
            with observatory.daemons.onemetre_power.connect() as power:
                if not power.switch(args[0], enable):
                    print('error: failed to switch {} {}'.format(args[0], args[1]))
                    return -1
                return 0
    print('usage: {} switch <port> (on|off)'.format(SCRIPT_NAME))
    return -1

def print_usage(name):
    """Prints the utility help"""
    print('Usage: {} <command>'.format(name))
    print()
    print('   status      print a human-readable summary of the power system')
    print('   json        print a machine-readable summary of the power system')
    print('   switch      switch a named PDU port on or off')
    print()

    return 1

if __name__ == '__main__':
    if len(sys.argv) == 1:
        sys.exit(print_usage(SCRIPT_NAME))

    if sys.argv[1] == 'status':
        sys.exit(print_status())
    elif sys.argv[1] == 'json':
        sys.exit(print_json())
    elif sys.argv[1] == 'switch':
        sys.exit(switch_power(sys.argv[2:]))

    # Command not found
    sys.exit(print_usage(SCRIPT_NAME))

