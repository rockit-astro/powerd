#!/usr/bin/env python3
#
# This file is part of powerd.
#
# powerd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# powerd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with powerd.  If not, see <http://www.gnu.org/licenses/>.

"""Commandline client for interfacing with the power system daemon"""

import datetime
import glob
import json
import os
import sys
import Pyro4
from warwick.observatory.common import TFmt
from warwick.observatory.power import Config, SwitchStatus, APCUPSStatus

SCRIPT_NAME = os.path.basename(sys.argv[0])
sys.excepthook = Pyro4.util.excepthook


def run_command(command, args):
    """Runs a daemon command, handling error messages"""
    if 'POWERD_CONFIG_PATH' in os.environ:
        config = Config(os.environ['POWERD_CONFIG_PATH'])
    else:
        # Load the config file defined in the POWERD_CONFIG_PATH environment variable or from the
        # default system location (/etc/powerd/). Exit with an error if zero or multiple are found.
        files = glob.glob("/etc/powerd/*.json")
        if len(files) != 1:
            print('error: failed to guess the default config file. ' +
                  'Run as POWERD_CONFIG_PATH=/path/to/config.json power <command>')
            return 1

        config = Config(files[0])

    try:
        ret = command(config, args)
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with the power system daemon')
        return 1

    sys.exit(ret)


def print_status(config, _):
    """Prints the latest data in human-readable form"""
    with config.daemon.connect(timeout=15) as power:
        latest = power.last_measurement()
        metadata = power.measurement_labels()

    if latest is not None:
        date = datetime.datetime.strptime(latest['date'], '%Y-%m-%dT%H:%M:%SZ')

        # Find the longest label to set the parameter indent
        max_label_length = 0
        for m in metadata:
            max_label_length = max(max_label_length, len(m['label']))

        print('Data received \033[1m{}\033[0m:'.format(date))
        for m in metadata:
            label_padding = max_label_length - len(m['label'])
            label = ' ' * label_padding + m['label'] + ': '
            if m['type'] == 'switch':
                label += format_switch(latest[m['name']])
            elif m['type'] == 'voltage':
                label += format_voltage(latest[m['name']])
            elif m['type'] == 'ups':
                label += format_ups(
                    latest[m['name'] + '_status'],
                    latest[m['name'] + '_battery_remaining'],
                    latest[m['name'] + '_battery_healthy'],
                    latest[m['name'] + '_load']
                )
            elif m['type'] == 'ats':
                label += format_ats(latest[m['name'] + '_source'])

            print(label)
        print()
    else:
        print('error: failed to query data')

    return 0


def format_switch(status):
    """Builds a formatted string indicating whether a switch is enabled"""
    if status == SwitchStatus.On:
        return TFmt.Green + TFmt.Bold + 'ENABLED' + TFmt.Clear
    if status == SwitchStatus.Off:
        return TFmt.Red + TFmt.Bold + 'DISABLED' + TFmt.Clear
    return TFmt.Red + TFmt.Bold + 'UNKNOWN' + TFmt.Clear


def format_voltage(voltage):
    """Builds a formatted string reporting a voltage measurement"""
    if voltage is None:
        return TFmt.Red + TFmt.Bold + 'ERROR' + TFmt.Clear

    return '{:.2f}'.format(voltage) + TFmt.Bold + ' V' + TFmt.Clear


def format_ups(status, battery_remaining, battery_healthy, load):
    """Builds a formatted string reporting UPS status"""
    ret = APCUPSStatus.message(status)
    if status == APCUPSStatus.Unknown:
        return ret

    ret += ' ({2}{0}%{3} battery; {2}{1}%{3} load)'.format(battery_remaining, load, TFmt.Bold, TFmt.Clear)
    if not battery_healthy:
        ret += TFmt.Bold + TFmt.Red + ' REPLACE BATTERY' + TFmt.Clear
    return ret


def format_ats(source):
    """Builds a formatted string reporting ATS status"""
    if source > 0:
        return TFmt.Bold + 'Source ' + str(source) + TFmt.Clear

    return TFmt.Red + TFmt.Bold + 'UNKNOWN' + TFmt.Clear


def print_json(config, _):
    """Prints the latest data in machine-readable form"""
    with config.daemon.connect() as power:
        latest = power.last_measurement()

    print(json.dumps(latest))

    return 0


def print_switches(config, _):
    """Prints a list of the switchable parameters"""
    with config.daemon.connect(timeout=15) as power:
        switches = power.switch_names()

    if switches is not None:
        print(' '.join(switches))
        return 0
    return 1


def switch_power(config, args):
    """Switches a named PDU port on or off"""
    if len(args) > 1:
        if args[1] == 'on' or args[1] == 'off':
            enable = args[1] == 'on'
            with config.daemon.connect() as power:
                if not power.switch(args[0], enable):
                    print('error: failed to switch {} {}'.format(args[0], args[1]))
                    return -1
                return 0
    print('usage: {} switch <port> (on|off)'.format(SCRIPT_NAME))
    return -1


def print_usage():
    """Prints the utility help"""
    print('Usage: {} <command>'.format(SCRIPT_NAME))
    print()
    print('   status      print a human-readable summary of the power system')
    print('   json        print a machine-readable summary of the power system')
    print('   switch      switch a named PDU port on or off')
    print()

    return 1


if __name__ == '__main__':
    commands = {
        'status': print_status,
        'json': print_json,
        'switch': switch_power,
        'list-switches': print_switches
    }

    if len(sys.argv) >= 2 and sys.argv[1] in commands:
        sys.exit(run_command(commands[sys.argv[1]], sys.argv[2:]))

    sys.exit(print_usage())
