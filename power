#!/usr/bin/env python3
#
# This file is part of powerd.
#
# powerd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# powerd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with powerd.  If not, see <http://www.gnu.org/licenses/>.

"""Commandline client for interfacing with the power system daemon"""

import datetime
import json
import os
import sys
import Pyro4

PYRO_HOST = '192.168.0.102'
PYRO_PORT = 9009
PYRO_NAME = 'power_daemon'
PYRO_COMM_TIMEOUT = 5

PYRO_URI = 'PYRO:' + PYRO_NAME + '@' + PYRO_HOST + ':' + str(PYRO_PORT)
SCRIPT_NAME = os.path.basename(sys.argv[0])

FMT_GREEN = u'\033[92m'
FMT_RED = u'\033[91m'
FMT_BOLD = u'\033[1m'
FMT_CLEAR = u'\033[0m'

def print_status():
    """Prints the latest data in human-readable form"""
    latest = None
    try:
        with Pyro4.Proxy(PYRO_URI) as power:
            latest = power.last_measurement()
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with the power system daemon')
        return 1

    if latest is not None:
        date = datetime.datetime.strptime(latest['date'], '%Y-%m-%dT%H:%M:%SZ')
        print('Data received \033[1m{}\033[0m:'.format(date))
        print('Tel. Controllers: ' + format_power(latest['telescope_12v']))
        print('     Tel. Motors: ' + format_power(latest['telescope_80v']))
        print('       Tel. Cube: ' + format_power(latest['telescope_mixed']))
        print('     Tel. Covers: ' + format_power(latest['telescope_covers']))
        print(' Weather Station: ' + format_power(latest['vaisala']))
        print(' Rack (UK board): ' + format_power(latest['rack_mixed']))
        print('      Dome Light: ' + format_power(latest['light']))
        print('Support Computer: ' + format_power(latest['nuc2']))

        print()
    else:
        print('error: failed to query data')

    return 0

def format_power(enabled):
    if enabled:
        return FMT_GREEN + FMT_BOLD + 'ENABLED' + FMT_CLEAR
    return FMT_RED + FMT_BOLD + 'DISABLED' + FMT_CLEAR

def print_json():
    """Prints the latest data in machine-readable form"""
    latest = None
    try:
        with Pyro4.Proxy(PYRO_URI) as power:
            latest = power.last_measurement()
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with the power system daemon')
        return 1

    print(json.dumps(latest))

    return 0

def switch_power(args):
    """Switches a named PDU port on or off"""
    if len(args) > 1:
        enable = False
        if args[1] == 'on' or args[1] == 'off':
            enable = args[1] == 'on'
            with Pyro4.Proxy(PYRO_URI) as power:
                if not power.switch(args[0], enable):
                    print('error: failed to switch {} {}'.format(args[0], args[1]))
                    return -1
                return 0
    print('usage: {} switch <port> (on|off)'.format(SCRIPT_NAME))
    return -1

def print_usage(name):
    """Prints the utility help"""
    print('Usage: {} <command>'.format(name))
    print()
    print('   status      print a human-readable summary of the power system')
    print('   json        print a machine-readable summary of the power system')
    print('   switch      switch a named PDU port on or off')
    print()

    return 1

if __name__ == '__main__':
    if len(sys.argv) == 1:
        sys.exit(print_usage(SCRIPT_NAME))

    Pyro4.config.COMMTIMEOUT = PYRO_COMM_TIMEOUT
    if sys.argv[1] == 'status':
        sys.exit(print_status())
    elif sys.argv[1] == 'json':
        sys.exit(print_json())
    elif sys.argv[1] == 'switch':
        sys.exit(switch_power(sys.argv[2:]))

    # Command not found
    sys.exit(print_usage(SCRIPT_NAME))

