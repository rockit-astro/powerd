#!/usr/bin/env python3
#
# This file is part of the Robotic Observatory Control Kit (rockit)
#
# rockit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# rockit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rockit.  If not, see <http://www.gnu.org/licenses/>.

"""Commandline helper for toggling the default dome/enclosure light"""

import glob
import os
import sys
import Pyro4
from rockit.power import Config

SCRIPT_NAME = os.path.basename(sys.argv[0])
sys.excepthook = Pyro4.util.excepthook


if __name__ == '__main__':
    if len(sys.argv) <= 1:
        print('usage: {} (on|off|status)'.format(SCRIPT_NAME))
        sys.exit(-1)

    if 'POWERD_CONFIG_PATH' in os.environ:
        config = Config(os.environ['POWERD_CONFIG_PATH'])
    else:
        # Load the config file defined in the POWERD_CONFIG_PATH environment variable or from the
        # default system location (/etc/powerd/). Exit with an error if zero or multiple are found.
        files = glob.glob("/etc/powerd/*.json")
        if len(files) != 1:
            print('error: failed to guess the default config file. ' +
                  'Run as POWERD_CONFIG_PATH=/path/to/config.json light <command>')
            sys.exit(1)

        config = Config(files[0])

    try:
        if sys.argv[1] == 'on' or sys.argv[1] == 'off':
            with config.daemon.connect() as power:
                if not power.switch('light', sys.argv[1] == 'on'):
                    print('error: failed to switch light {}'.format(sys.argv[1]))
                    sys.exit(-1)
        elif sys.argv[1] == 'status':
            with config.daemon.connect() as power:
                print('on' if power.value('light') else 'off')
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with the power daemon')
        sys.exit(-1)
